// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package service

//go:generate minimock -i route256.ozon.ru/project/loms/internal/service.StockRepository -o stock_repository_mock_test.go -n StockRepositoryMock -p service

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	stocks_repo "route256.ozon.ru/project/loms/internal/repo/db_repo/stocks"
)

// StockRepositoryMock implements StockRepository
type StockRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateStock          func(ctx context.Context, arg stocks_repo.CreateStockParams) (err error)
	inspectFuncCreateStock   func(ctx context.Context, arg stocks_repo.CreateStockParams)
	afterCreateStockCounter  uint64
	beforeCreateStockCounter uint64
	CreateStockMock          mStockRepositoryMockCreateStock

	funcGetStockBySKU          func(ctx context.Context, sku int32) (s1 stocks_repo.StocksStock, err error)
	inspectFuncGetStockBySKU   func(ctx context.Context, sku int32)
	afterGetStockBySKUCounter  uint64
	beforeGetStockBySKUCounter uint64
	GetStockBySKUMock          mStockRepositoryMockGetStockBySKU

	funcUpdateStock          func(ctx context.Context, arg stocks_repo.UpdateStockParams) (err error)
	inspectFuncUpdateStock   func(ctx context.Context, arg stocks_repo.UpdateStockParams)
	afterUpdateStockCounter  uint64
	beforeUpdateStockCounter uint64
	UpdateStockMock          mStockRepositoryMockUpdateStock
}

// NewStockRepositoryMock returns a mock for StockRepository
func NewStockRepositoryMock(t minimock.Tester) *StockRepositoryMock {
	m := &StockRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateStockMock = mStockRepositoryMockCreateStock{mock: m}
	m.CreateStockMock.callArgs = []*StockRepositoryMockCreateStockParams{}

	m.GetStockBySKUMock = mStockRepositoryMockGetStockBySKU{mock: m}
	m.GetStockBySKUMock.callArgs = []*StockRepositoryMockGetStockBySKUParams{}

	m.UpdateStockMock = mStockRepositoryMockUpdateStock{mock: m}
	m.UpdateStockMock.callArgs = []*StockRepositoryMockUpdateStockParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockRepositoryMockCreateStock struct {
	mock               *StockRepositoryMock
	defaultExpectation *StockRepositoryMockCreateStockExpectation
	expectations       []*StockRepositoryMockCreateStockExpectation

	callArgs []*StockRepositoryMockCreateStockParams
	mutex    sync.RWMutex
}

// StockRepositoryMockCreateStockExpectation specifies expectation struct of the StockRepository.CreateStock
type StockRepositoryMockCreateStockExpectation struct {
	mock    *StockRepositoryMock
	params  *StockRepositoryMockCreateStockParams
	results *StockRepositoryMockCreateStockResults
	Counter uint64
}

// StockRepositoryMockCreateStockParams contains parameters of the StockRepository.CreateStock
type StockRepositoryMockCreateStockParams struct {
	ctx context.Context
	arg stocks_repo.CreateStockParams
}

// StockRepositoryMockCreateStockResults contains results of the StockRepository.CreateStock
type StockRepositoryMockCreateStockResults struct {
	err error
}

// Expect sets up expected params for StockRepository.CreateStock
func (mmCreateStock *mStockRepositoryMockCreateStock) Expect(ctx context.Context, arg stocks_repo.CreateStockParams) *mStockRepositoryMockCreateStock {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepositoryMock.CreateStock mock is already set by Set")
	}

	if mmCreateStock.defaultExpectation == nil {
		mmCreateStock.defaultExpectation = &StockRepositoryMockCreateStockExpectation{}
	}

	mmCreateStock.defaultExpectation.params = &StockRepositoryMockCreateStockParams{ctx, arg}
	for _, e := range mmCreateStock.expectations {
		if minimock.Equal(e.params, mmCreateStock.defaultExpectation.params) {
			mmCreateStock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateStock.defaultExpectation.params)
		}
	}

	return mmCreateStock
}

// Inspect accepts an inspector function that has same arguments as the StockRepository.CreateStock
func (mmCreateStock *mStockRepositoryMockCreateStock) Inspect(f func(ctx context.Context, arg stocks_repo.CreateStockParams)) *mStockRepositoryMockCreateStock {
	if mmCreateStock.mock.inspectFuncCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("Inspect function is already set for StockRepositoryMock.CreateStock")
	}

	mmCreateStock.mock.inspectFuncCreateStock = f

	return mmCreateStock
}

// Return sets up results that will be returned by StockRepository.CreateStock
func (mmCreateStock *mStockRepositoryMockCreateStock) Return(err error) *StockRepositoryMock {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepositoryMock.CreateStock mock is already set by Set")
	}

	if mmCreateStock.defaultExpectation == nil {
		mmCreateStock.defaultExpectation = &StockRepositoryMockCreateStockExpectation{mock: mmCreateStock.mock}
	}
	mmCreateStock.defaultExpectation.results = &StockRepositoryMockCreateStockResults{err}
	return mmCreateStock.mock
}

// Set uses given function f to mock the StockRepository.CreateStock method
func (mmCreateStock *mStockRepositoryMockCreateStock) Set(f func(ctx context.Context, arg stocks_repo.CreateStockParams) (err error)) *StockRepositoryMock {
	if mmCreateStock.defaultExpectation != nil {
		mmCreateStock.mock.t.Fatalf("Default expectation is already set for the StockRepository.CreateStock method")
	}

	if len(mmCreateStock.expectations) > 0 {
		mmCreateStock.mock.t.Fatalf("Some expectations are already set for the StockRepository.CreateStock method")
	}

	mmCreateStock.mock.funcCreateStock = f
	return mmCreateStock.mock
}

// When sets expectation for the StockRepository.CreateStock which will trigger the result defined by the following
// Then helper
func (mmCreateStock *mStockRepositoryMockCreateStock) When(ctx context.Context, arg stocks_repo.CreateStockParams) *StockRepositoryMockCreateStockExpectation {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepositoryMock.CreateStock mock is already set by Set")
	}

	expectation := &StockRepositoryMockCreateStockExpectation{
		mock:   mmCreateStock.mock,
		params: &StockRepositoryMockCreateStockParams{ctx, arg},
	}
	mmCreateStock.expectations = append(mmCreateStock.expectations, expectation)
	return expectation
}

// Then sets up StockRepository.CreateStock return parameters for the expectation previously defined by the When method
func (e *StockRepositoryMockCreateStockExpectation) Then(err error) *StockRepositoryMock {
	e.results = &StockRepositoryMockCreateStockResults{err}
	return e.mock
}

// CreateStock implements StockRepository
func (mmCreateStock *StockRepositoryMock) CreateStock(ctx context.Context, arg stocks_repo.CreateStockParams) (err error) {
	mm_atomic.AddUint64(&mmCreateStock.beforeCreateStockCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateStock.afterCreateStockCounter, 1)

	if mmCreateStock.inspectFuncCreateStock != nil {
		mmCreateStock.inspectFuncCreateStock(ctx, arg)
	}

	mm_params := StockRepositoryMockCreateStockParams{ctx, arg}

	// Record call args
	mmCreateStock.CreateStockMock.mutex.Lock()
	mmCreateStock.CreateStockMock.callArgs = append(mmCreateStock.CreateStockMock.callArgs, &mm_params)
	mmCreateStock.CreateStockMock.mutex.Unlock()

	for _, e := range mmCreateStock.CreateStockMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateStock.CreateStockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateStock.CreateStockMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateStock.CreateStockMock.defaultExpectation.params
		mm_got := StockRepositoryMockCreateStockParams{ctx, arg}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateStock.t.Errorf("StockRepositoryMock.CreateStock got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateStock.CreateStockMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateStock.t.Fatal("No results are set for the StockRepositoryMock.CreateStock")
		}
		return (*mm_results).err
	}
	if mmCreateStock.funcCreateStock != nil {
		return mmCreateStock.funcCreateStock(ctx, arg)
	}
	mmCreateStock.t.Fatalf("Unexpected call to StockRepositoryMock.CreateStock. %v %v", ctx, arg)
	return
}

// CreateStockAfterCounter returns a count of finished StockRepositoryMock.CreateStock invocations
func (mmCreateStock *StockRepositoryMock) CreateStockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateStock.afterCreateStockCounter)
}

// CreateStockBeforeCounter returns a count of StockRepositoryMock.CreateStock invocations
func (mmCreateStock *StockRepositoryMock) CreateStockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateStock.beforeCreateStockCounter)
}

// Calls returns a list of arguments used in each call to StockRepositoryMock.CreateStock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateStock *mStockRepositoryMockCreateStock) Calls() []*StockRepositoryMockCreateStockParams {
	mmCreateStock.mutex.RLock()

	argCopy := make([]*StockRepositoryMockCreateStockParams, len(mmCreateStock.callArgs))
	copy(argCopy, mmCreateStock.callArgs)

	mmCreateStock.mutex.RUnlock()

	return argCopy
}

// MinimockCreateStockDone returns true if the count of the CreateStock invocations corresponds
// the number of defined expectations
func (m *StockRepositoryMock) MinimockCreateStockDone() bool {
	for _, e := range m.CreateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateStockCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateStock != nil && mm_atomic.LoadUint64(&m.afterCreateStockCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateStockInspect logs each unmet expectation
func (m *StockRepositoryMock) MinimockCreateStockInspect() {
	for _, e := range m.CreateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepositoryMock.CreateStock with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateStockCounter) < 1 {
		if m.CreateStockMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepositoryMock.CreateStock")
		} else {
			m.t.Errorf("Expected call to StockRepositoryMock.CreateStock with params: %#v", *m.CreateStockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateStock != nil && mm_atomic.LoadUint64(&m.afterCreateStockCounter) < 1 {
		m.t.Error("Expected call to StockRepositoryMock.CreateStock")
	}
}

type mStockRepositoryMockGetStockBySKU struct {
	mock               *StockRepositoryMock
	defaultExpectation *StockRepositoryMockGetStockBySKUExpectation
	expectations       []*StockRepositoryMockGetStockBySKUExpectation

	callArgs []*StockRepositoryMockGetStockBySKUParams
	mutex    sync.RWMutex
}

// StockRepositoryMockGetStockBySKUExpectation specifies expectation struct of the StockRepository.GetStockBySKU
type StockRepositoryMockGetStockBySKUExpectation struct {
	mock    *StockRepositoryMock
	params  *StockRepositoryMockGetStockBySKUParams
	results *StockRepositoryMockGetStockBySKUResults
	Counter uint64
}

// StockRepositoryMockGetStockBySKUParams contains parameters of the StockRepository.GetStockBySKU
type StockRepositoryMockGetStockBySKUParams struct {
	ctx context.Context
	sku int32
}

// StockRepositoryMockGetStockBySKUResults contains results of the StockRepository.GetStockBySKU
type StockRepositoryMockGetStockBySKUResults struct {
	s1  stocks_repo.StocksStock
	err error
}

// Expect sets up expected params for StockRepository.GetStockBySKU
func (mmGetStockBySKU *mStockRepositoryMockGetStockBySKU) Expect(ctx context.Context, sku int32) *mStockRepositoryMockGetStockBySKU {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("StockRepositoryMock.GetStockBySKU mock is already set by Set")
	}

	if mmGetStockBySKU.defaultExpectation == nil {
		mmGetStockBySKU.defaultExpectation = &StockRepositoryMockGetStockBySKUExpectation{}
	}

	mmGetStockBySKU.defaultExpectation.params = &StockRepositoryMockGetStockBySKUParams{ctx, sku}
	for _, e := range mmGetStockBySKU.expectations {
		if minimock.Equal(e.params, mmGetStockBySKU.defaultExpectation.params) {
			mmGetStockBySKU.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockBySKU.defaultExpectation.params)
		}
	}

	return mmGetStockBySKU
}

// Inspect accepts an inspector function that has same arguments as the StockRepository.GetStockBySKU
func (mmGetStockBySKU *mStockRepositoryMockGetStockBySKU) Inspect(f func(ctx context.Context, sku int32)) *mStockRepositoryMockGetStockBySKU {
	if mmGetStockBySKU.mock.inspectFuncGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("Inspect function is already set for StockRepositoryMock.GetStockBySKU")
	}

	mmGetStockBySKU.mock.inspectFuncGetStockBySKU = f

	return mmGetStockBySKU
}

// Return sets up results that will be returned by StockRepository.GetStockBySKU
func (mmGetStockBySKU *mStockRepositoryMockGetStockBySKU) Return(s1 stocks_repo.StocksStock, err error) *StockRepositoryMock {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("StockRepositoryMock.GetStockBySKU mock is already set by Set")
	}

	if mmGetStockBySKU.defaultExpectation == nil {
		mmGetStockBySKU.defaultExpectation = &StockRepositoryMockGetStockBySKUExpectation{mock: mmGetStockBySKU.mock}
	}
	mmGetStockBySKU.defaultExpectation.results = &StockRepositoryMockGetStockBySKUResults{s1, err}
	return mmGetStockBySKU.mock
}

// Set uses given function f to mock the StockRepository.GetStockBySKU method
func (mmGetStockBySKU *mStockRepositoryMockGetStockBySKU) Set(f func(ctx context.Context, sku int32) (s1 stocks_repo.StocksStock, err error)) *StockRepositoryMock {
	if mmGetStockBySKU.defaultExpectation != nil {
		mmGetStockBySKU.mock.t.Fatalf("Default expectation is already set for the StockRepository.GetStockBySKU method")
	}

	if len(mmGetStockBySKU.expectations) > 0 {
		mmGetStockBySKU.mock.t.Fatalf("Some expectations are already set for the StockRepository.GetStockBySKU method")
	}

	mmGetStockBySKU.mock.funcGetStockBySKU = f
	return mmGetStockBySKU.mock
}

// When sets expectation for the StockRepository.GetStockBySKU which will trigger the result defined by the following
// Then helper
func (mmGetStockBySKU *mStockRepositoryMockGetStockBySKU) When(ctx context.Context, sku int32) *StockRepositoryMockGetStockBySKUExpectation {
	if mmGetStockBySKU.mock.funcGetStockBySKU != nil {
		mmGetStockBySKU.mock.t.Fatalf("StockRepositoryMock.GetStockBySKU mock is already set by Set")
	}

	expectation := &StockRepositoryMockGetStockBySKUExpectation{
		mock:   mmGetStockBySKU.mock,
		params: &StockRepositoryMockGetStockBySKUParams{ctx, sku},
	}
	mmGetStockBySKU.expectations = append(mmGetStockBySKU.expectations, expectation)
	return expectation
}

// Then sets up StockRepository.GetStockBySKU return parameters for the expectation previously defined by the When method
func (e *StockRepositoryMockGetStockBySKUExpectation) Then(s1 stocks_repo.StocksStock, err error) *StockRepositoryMock {
	e.results = &StockRepositoryMockGetStockBySKUResults{s1, err}
	return e.mock
}

// GetStockBySKU implements StockRepository
func (mmGetStockBySKU *StockRepositoryMock) GetStockBySKU(ctx context.Context, sku int32) (s1 stocks_repo.StocksStock, err error) {
	mm_atomic.AddUint64(&mmGetStockBySKU.beforeGetStockBySKUCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockBySKU.afterGetStockBySKUCounter, 1)

	if mmGetStockBySKU.inspectFuncGetStockBySKU != nil {
		mmGetStockBySKU.inspectFuncGetStockBySKU(ctx, sku)
	}

	mm_params := StockRepositoryMockGetStockBySKUParams{ctx, sku}

	// Record call args
	mmGetStockBySKU.GetStockBySKUMock.mutex.Lock()
	mmGetStockBySKU.GetStockBySKUMock.callArgs = append(mmGetStockBySKU.GetStockBySKUMock.callArgs, &mm_params)
	mmGetStockBySKU.GetStockBySKUMock.mutex.Unlock()

	for _, e := range mmGetStockBySKU.GetStockBySKUMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetStockBySKU.GetStockBySKUMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.params
		mm_got := StockRepositoryMockGetStockBySKUParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockBySKU.t.Errorf("StockRepositoryMock.GetStockBySKU got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockBySKU.GetStockBySKUMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockBySKU.t.Fatal("No results are set for the StockRepositoryMock.GetStockBySKU")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetStockBySKU.funcGetStockBySKU != nil {
		return mmGetStockBySKU.funcGetStockBySKU(ctx, sku)
	}
	mmGetStockBySKU.t.Fatalf("Unexpected call to StockRepositoryMock.GetStockBySKU. %v %v", ctx, sku)
	return
}

// GetStockBySKUAfterCounter returns a count of finished StockRepositoryMock.GetStockBySKU invocations
func (mmGetStockBySKU *StockRepositoryMock) GetStockBySKUAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockBySKU.afterGetStockBySKUCounter)
}

// GetStockBySKUBeforeCounter returns a count of StockRepositoryMock.GetStockBySKU invocations
func (mmGetStockBySKU *StockRepositoryMock) GetStockBySKUBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockBySKU.beforeGetStockBySKUCounter)
}

// Calls returns a list of arguments used in each call to StockRepositoryMock.GetStockBySKU.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockBySKU *mStockRepositoryMockGetStockBySKU) Calls() []*StockRepositoryMockGetStockBySKUParams {
	mmGetStockBySKU.mutex.RLock()

	argCopy := make([]*StockRepositoryMockGetStockBySKUParams, len(mmGetStockBySKU.callArgs))
	copy(argCopy, mmGetStockBySKU.callArgs)

	mmGetStockBySKU.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockBySKUDone returns true if the count of the GetStockBySKU invocations corresponds
// the number of defined expectations
func (m *StockRepositoryMock) MinimockGetStockBySKUDone() bool {
	for _, e := range m.GetStockBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockBySKUMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStockBySKUCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockBySKU != nil && mm_atomic.LoadUint64(&m.afterGetStockBySKUCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStockBySKUInspect logs each unmet expectation
func (m *StockRepositoryMock) MinimockGetStockBySKUInspect() {
	for _, e := range m.GetStockBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepositoryMock.GetStockBySKU with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockBySKUMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStockBySKUCounter) < 1 {
		if m.GetStockBySKUMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepositoryMock.GetStockBySKU")
		} else {
			m.t.Errorf("Expected call to StockRepositoryMock.GetStockBySKU with params: %#v", *m.GetStockBySKUMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockBySKU != nil && mm_atomic.LoadUint64(&m.afterGetStockBySKUCounter) < 1 {
		m.t.Error("Expected call to StockRepositoryMock.GetStockBySKU")
	}
}

type mStockRepositoryMockUpdateStock struct {
	mock               *StockRepositoryMock
	defaultExpectation *StockRepositoryMockUpdateStockExpectation
	expectations       []*StockRepositoryMockUpdateStockExpectation

	callArgs []*StockRepositoryMockUpdateStockParams
	mutex    sync.RWMutex
}

// StockRepositoryMockUpdateStockExpectation specifies expectation struct of the StockRepository.UpdateStock
type StockRepositoryMockUpdateStockExpectation struct {
	mock    *StockRepositoryMock
	params  *StockRepositoryMockUpdateStockParams
	results *StockRepositoryMockUpdateStockResults
	Counter uint64
}

// StockRepositoryMockUpdateStockParams contains parameters of the StockRepository.UpdateStock
type StockRepositoryMockUpdateStockParams struct {
	ctx context.Context
	arg stocks_repo.UpdateStockParams
}

// StockRepositoryMockUpdateStockResults contains results of the StockRepository.UpdateStock
type StockRepositoryMockUpdateStockResults struct {
	err error
}

// Expect sets up expected params for StockRepository.UpdateStock
func (mmUpdateStock *mStockRepositoryMockUpdateStock) Expect(ctx context.Context, arg stocks_repo.UpdateStockParams) *mStockRepositoryMockUpdateStock {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("StockRepositoryMock.UpdateStock mock is already set by Set")
	}

	if mmUpdateStock.defaultExpectation == nil {
		mmUpdateStock.defaultExpectation = &StockRepositoryMockUpdateStockExpectation{}
	}

	mmUpdateStock.defaultExpectation.params = &StockRepositoryMockUpdateStockParams{ctx, arg}
	for _, e := range mmUpdateStock.expectations {
		if minimock.Equal(e.params, mmUpdateStock.defaultExpectation.params) {
			mmUpdateStock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateStock.defaultExpectation.params)
		}
	}

	return mmUpdateStock
}

// Inspect accepts an inspector function that has same arguments as the StockRepository.UpdateStock
func (mmUpdateStock *mStockRepositoryMockUpdateStock) Inspect(f func(ctx context.Context, arg stocks_repo.UpdateStockParams)) *mStockRepositoryMockUpdateStock {
	if mmUpdateStock.mock.inspectFuncUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("Inspect function is already set for StockRepositoryMock.UpdateStock")
	}

	mmUpdateStock.mock.inspectFuncUpdateStock = f

	return mmUpdateStock
}

// Return sets up results that will be returned by StockRepository.UpdateStock
func (mmUpdateStock *mStockRepositoryMockUpdateStock) Return(err error) *StockRepositoryMock {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("StockRepositoryMock.UpdateStock mock is already set by Set")
	}

	if mmUpdateStock.defaultExpectation == nil {
		mmUpdateStock.defaultExpectation = &StockRepositoryMockUpdateStockExpectation{mock: mmUpdateStock.mock}
	}
	mmUpdateStock.defaultExpectation.results = &StockRepositoryMockUpdateStockResults{err}
	return mmUpdateStock.mock
}

// Set uses given function f to mock the StockRepository.UpdateStock method
func (mmUpdateStock *mStockRepositoryMockUpdateStock) Set(f func(ctx context.Context, arg stocks_repo.UpdateStockParams) (err error)) *StockRepositoryMock {
	if mmUpdateStock.defaultExpectation != nil {
		mmUpdateStock.mock.t.Fatalf("Default expectation is already set for the StockRepository.UpdateStock method")
	}

	if len(mmUpdateStock.expectations) > 0 {
		mmUpdateStock.mock.t.Fatalf("Some expectations are already set for the StockRepository.UpdateStock method")
	}

	mmUpdateStock.mock.funcUpdateStock = f
	return mmUpdateStock.mock
}

// When sets expectation for the StockRepository.UpdateStock which will trigger the result defined by the following
// Then helper
func (mmUpdateStock *mStockRepositoryMockUpdateStock) When(ctx context.Context, arg stocks_repo.UpdateStockParams) *StockRepositoryMockUpdateStockExpectation {
	if mmUpdateStock.mock.funcUpdateStock != nil {
		mmUpdateStock.mock.t.Fatalf("StockRepositoryMock.UpdateStock mock is already set by Set")
	}

	expectation := &StockRepositoryMockUpdateStockExpectation{
		mock:   mmUpdateStock.mock,
		params: &StockRepositoryMockUpdateStockParams{ctx, arg},
	}
	mmUpdateStock.expectations = append(mmUpdateStock.expectations, expectation)
	return expectation
}

// Then sets up StockRepository.UpdateStock return parameters for the expectation previously defined by the When method
func (e *StockRepositoryMockUpdateStockExpectation) Then(err error) *StockRepositoryMock {
	e.results = &StockRepositoryMockUpdateStockResults{err}
	return e.mock
}

// UpdateStock implements StockRepository
func (mmUpdateStock *StockRepositoryMock) UpdateStock(ctx context.Context, arg stocks_repo.UpdateStockParams) (err error) {
	mm_atomic.AddUint64(&mmUpdateStock.beforeUpdateStockCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateStock.afterUpdateStockCounter, 1)

	if mmUpdateStock.inspectFuncUpdateStock != nil {
		mmUpdateStock.inspectFuncUpdateStock(ctx, arg)
	}

	mm_params := StockRepositoryMockUpdateStockParams{ctx, arg}

	// Record call args
	mmUpdateStock.UpdateStockMock.mutex.Lock()
	mmUpdateStock.UpdateStockMock.callArgs = append(mmUpdateStock.UpdateStockMock.callArgs, &mm_params)
	mmUpdateStock.UpdateStockMock.mutex.Unlock()

	for _, e := range mmUpdateStock.UpdateStockMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateStock.UpdateStockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateStock.UpdateStockMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateStock.UpdateStockMock.defaultExpectation.params
		mm_got := StockRepositoryMockUpdateStockParams{ctx, arg}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateStock.t.Errorf("StockRepositoryMock.UpdateStock got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateStock.UpdateStockMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateStock.t.Fatal("No results are set for the StockRepositoryMock.UpdateStock")
		}
		return (*mm_results).err
	}
	if mmUpdateStock.funcUpdateStock != nil {
		return mmUpdateStock.funcUpdateStock(ctx, arg)
	}
	mmUpdateStock.t.Fatalf("Unexpected call to StockRepositoryMock.UpdateStock. %v %v", ctx, arg)
	return
}

// UpdateStockAfterCounter returns a count of finished StockRepositoryMock.UpdateStock invocations
func (mmUpdateStock *StockRepositoryMock) UpdateStockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStock.afterUpdateStockCounter)
}

// UpdateStockBeforeCounter returns a count of StockRepositoryMock.UpdateStock invocations
func (mmUpdateStock *StockRepositoryMock) UpdateStockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStock.beforeUpdateStockCounter)
}

// Calls returns a list of arguments used in each call to StockRepositoryMock.UpdateStock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateStock *mStockRepositoryMockUpdateStock) Calls() []*StockRepositoryMockUpdateStockParams {
	mmUpdateStock.mutex.RLock()

	argCopy := make([]*StockRepositoryMockUpdateStockParams, len(mmUpdateStock.callArgs))
	copy(argCopy, mmUpdateStock.callArgs)

	mmUpdateStock.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateStockDone returns true if the count of the UpdateStock invocations corresponds
// the number of defined expectations
func (m *StockRepositoryMock) MinimockUpdateStockDone() bool {
	for _, e := range m.UpdateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateStockCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStock != nil && mm_atomic.LoadUint64(&m.afterUpdateStockCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateStockInspect logs each unmet expectation
func (m *StockRepositoryMock) MinimockUpdateStockInspect() {
	for _, e := range m.UpdateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepositoryMock.UpdateStock with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateStockCounter) < 1 {
		if m.UpdateStockMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepositoryMock.UpdateStock")
		} else {
			m.t.Errorf("Expected call to StockRepositoryMock.UpdateStock with params: %#v", *m.UpdateStockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStock != nil && mm_atomic.LoadUint64(&m.afterUpdateStockCounter) < 1 {
		m.t.Error("Expected call to StockRepositoryMock.UpdateStock")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateStockInspect()

			m.MinimockGetStockBySKUInspect()

			m.MinimockUpdateStockInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateStockDone() &&
		m.MinimockGetStockBySKUDone() &&
		m.MinimockUpdateStockDone()
}
