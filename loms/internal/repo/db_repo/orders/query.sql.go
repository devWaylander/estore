// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package orders_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO orders."item" (order_id, sku, count)
VALUES ($1, $2, $3)
`

type CreateItemParams struct {
	OrderID int64
	Sku     int32
	Count   int32
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.Exec(ctx, createItem, arg.OrderID, arg.Sku, arg.Count)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders."order" (user_id)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateOrder(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getItemsByOrderID = `-- name: GetItemsByOrderID :many
SELECT
    i.id,
    i.order_id,
    i.sku,
    i.count
FROM
    orders."item" i
WHERE
    order_id = $1 AND i.deleted_at IS NULL
`

type GetItemsByOrderIDRow struct {
	ID      int64
	OrderID int64
	Sku     int32
	Count   int32
}

func (q *Queries) GetItemsByOrderID(ctx context.Context, orderID int64) ([]GetItemsByOrderIDRow, error) {
	rows, err := q.db.Query(ctx, getItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsByOrderIDRow
	for rows.Next() {
		var i GetItemsByOrderIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Sku,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT
    o.id,
    o.user_id,
    o.status
FROM
    orders."order" o
WHERE
    id = $1 AND o.deleted_at IS NULL
`

type GetOrderRow struct {
	ID     int64
	UserID int64
	Status pgtype.Text
}

func (q *Queries) GetOrder(ctx context.Context, id int64) (GetOrderRow, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i GetOrderRow
	err := row.Scan(&i.ID, &i.UserID, &i.Status)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders."order"
SET
    status = $2
WHERE
    id = $1
`

type UpdateOrderParams struct {
	ID     int64
	Status pgtype.Text
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder, arg.ID, arg.Status)
	return err
}
