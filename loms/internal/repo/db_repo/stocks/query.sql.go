// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package stocks_repo

import (
	"context"
)

const createStock = `-- name: CreateStock :exec
INSERT INTO stocks."stock" (sku, total_count, reserved)
VALUES ($1, $2, $3)
`

type CreateStockParams struct {
	Sku        int32
	TotalCount int32
	Reserved   int32
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) error {
	_, err := q.db.Exec(ctx, createStock, arg.Sku, arg.TotalCount, arg.Reserved)
	return err
}

const getStockBySKU = `-- name: GetStockBySKU :one
SELECT 
    s.id, 
    s.sku,
    s.total_count,
    s.reserved,
    s.deleted_at,
    s.created_at
FROM
    stocks."stock" s
WHERE
    s.sku = $1 AND s.deleted_at IS NULL
`

func (q *Queries) GetStockBySKU(ctx context.Context, sku int32) (StocksStock, error) {
	row := q.db.QueryRow(ctx, getStockBySKU, sku)
	var i StocksStock
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.TotalCount,
		&i.Reserved,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateStock = `-- name: UpdateStock :exec
UPDATE stocks."stock"
SET
    sku = COALESCE($2, sku),
    total_count = COALESCE($3, total_count),
    reserved = COALESCE($4, reserved)
WHERE
    id = $1
`

type UpdateStockParams struct {
	ID         int64
	Sku        int32
	TotalCount int32
	Reserved   int32
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) error {
	_, err := q.db.Exec(ctx, updateStock,
		arg.ID,
		arg.Sku,
		arg.TotalCount,
		arg.Reserved,
	)
	return err
}
