// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: orders.proto

package orders

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSku() <= 0 {
		err := ItemValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := OrderValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetItems()) < 1 {
		err := OrderValidationError{
			field:  "Items",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderCreateReqMultiError,
// or nil if none found.
func (m *OrderCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrder() == nil {
		err := OrderCreateReqValidationError{
			field:  "Order",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderCreateReqValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderCreateReqValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderCreateReqValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderCreateReqMultiError(errors)
	}

	return nil
}

// OrderCreateReqMultiError is an error wrapping multiple validation errors
// returned by OrderCreateReq.ValidateAll() if the designated constraints
// aren't met.
type OrderCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCreateReqMultiError) AllErrors() []error { return m }

// OrderCreateReqValidationError is the validation error returned by
// OrderCreateReq.Validate if the designated constraints aren't met.
type OrderCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCreateReqValidationError) ErrorName() string { return "OrderCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCreateReqValidationError{}

// Validate checks the field values on OrderCreateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderCreateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCreateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCreateRespMultiError, or nil if none found.
func (m *OrderCreateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCreateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderCreateRespMultiError(errors)
	}

	return nil
}

// OrderCreateRespMultiError is an error wrapping multiple validation errors
// returned by OrderCreateResp.ValidateAll() if the designated constraints
// aren't met.
type OrderCreateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCreateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCreateRespMultiError) AllErrors() []error { return m }

// OrderCreateRespValidationError is the validation error returned by
// OrderCreateResp.Validate if the designated constraints aren't met.
type OrderCreateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCreateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCreateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCreateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCreateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCreateRespValidationError) ErrorName() string { return "OrderCreateRespValidationError" }

// Error satisfies the builtin error interface
func (e OrderCreateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCreateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCreateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCreateRespValidationError{}

// Validate checks the field values on OrderGetInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderGetInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderGetInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderGetInfoReqMultiError, or nil if none found.
func (m *OrderGetInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderGetInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := OrderGetInfoReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderGetInfoReqMultiError(errors)
	}

	return nil
}

// OrderGetInfoReqMultiError is an error wrapping multiple validation errors
// returned by OrderGetInfoReq.ValidateAll() if the designated constraints
// aren't met.
type OrderGetInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderGetInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderGetInfoReqMultiError) AllErrors() []error { return m }

// OrderGetInfoReqValidationError is the validation error returned by
// OrderGetInfoReq.Validate if the designated constraints aren't met.
type OrderGetInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderGetInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderGetInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderGetInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderGetInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderGetInfoReqValidationError) ErrorName() string { return "OrderGetInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderGetInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderGetInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderGetInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderGetInfoReqValidationError{}

// Validate checks the field values on OrderGetInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderGetInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderGetInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderGetInfoRespMultiError, or nil if none found.
func (m *OrderGetInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderGetInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for UserId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderGetInfoRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderGetInfoRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderGetInfoRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderGetInfoRespMultiError(errors)
	}

	return nil
}

// OrderGetInfoRespMultiError is an error wrapping multiple validation errors
// returned by OrderGetInfoResp.ValidateAll() if the designated constraints
// aren't met.
type OrderGetInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderGetInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderGetInfoRespMultiError) AllErrors() []error { return m }

// OrderGetInfoRespValidationError is the validation error returned by
// OrderGetInfoResp.Validate if the designated constraints aren't met.
type OrderGetInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderGetInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderGetInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderGetInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderGetInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderGetInfoRespValidationError) ErrorName() string { return "OrderGetInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e OrderGetInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderGetInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderGetInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderGetInfoRespValidationError{}

// Validate checks the field values on OrderGetStockInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderGetStockInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderGetStockInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderGetStockInfoReqMultiError, or nil if none found.
func (m *OrderGetStockInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderGetStockInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSku() <= 0 {
		err := OrderGetStockInfoReqValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderGetStockInfoReqMultiError(errors)
	}

	return nil
}

// OrderGetStockInfoReqMultiError is an error wrapping multiple validation
// errors returned by OrderGetStockInfoReq.ValidateAll() if the designated
// constraints aren't met.
type OrderGetStockInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderGetStockInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderGetStockInfoReqMultiError) AllErrors() []error { return m }

// OrderGetStockInfoReqValidationError is the validation error returned by
// OrderGetStockInfoReq.Validate if the designated constraints aren't met.
type OrderGetStockInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderGetStockInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderGetStockInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderGetStockInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderGetStockInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderGetStockInfoReqValidationError) ErrorName() string {
	return "OrderGetStockInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e OrderGetStockInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderGetStockInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderGetStockInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderGetStockInfoReqValidationError{}

// Validate checks the field values on OrderGetStockInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderGetStockInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderGetStockInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderGetStockInfoRespMultiError, or nil if none found.
func (m *OrderGetStockInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderGetStockInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return OrderGetStockInfoRespMultiError(errors)
	}

	return nil
}

// OrderGetStockInfoRespMultiError is an error wrapping multiple validation
// errors returned by OrderGetStockInfoResp.ValidateAll() if the designated
// constraints aren't met.
type OrderGetStockInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderGetStockInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderGetStockInfoRespMultiError) AllErrors() []error { return m }

// OrderGetStockInfoRespValidationError is the validation error returned by
// OrderGetStockInfoResp.Validate if the designated constraints aren't met.
type OrderGetStockInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderGetStockInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderGetStockInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderGetStockInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderGetStockInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderGetStockInfoRespValidationError) ErrorName() string {
	return "OrderGetStockInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e OrderGetStockInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderGetStockInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderGetStockInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderGetStockInfoRespValidationError{}

// Validate checks the field values on OrderCancelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderCancelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCancelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderCancelReqMultiError,
// or nil if none found.
func (m *OrderCancelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCancelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := OrderCancelReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderCancelReqMultiError(errors)
	}

	return nil
}

// OrderCancelReqMultiError is an error wrapping multiple validation errors
// returned by OrderCancelReq.ValidateAll() if the designated constraints
// aren't met.
type OrderCancelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCancelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCancelReqMultiError) AllErrors() []error { return m }

// OrderCancelReqValidationError is the validation error returned by
// OrderCancelReq.Validate if the designated constraints aren't met.
type OrderCancelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCancelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCancelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCancelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCancelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCancelReqValidationError) ErrorName() string { return "OrderCancelReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderCancelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCancelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCancelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCancelReqValidationError{}

// Validate checks the field values on OrderCancelResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderCancelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCancelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCancelRespMultiError, or nil if none found.
func (m *OrderCancelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCancelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderCancelRespMultiError(errors)
	}

	return nil
}

// OrderCancelRespMultiError is an error wrapping multiple validation errors
// returned by OrderCancelResp.ValidateAll() if the designated constraints
// aren't met.
type OrderCancelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCancelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCancelRespMultiError) AllErrors() []error { return m }

// OrderCancelRespValidationError is the validation error returned by
// OrderCancelResp.Validate if the designated constraints aren't met.
type OrderCancelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCancelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCancelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCancelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCancelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCancelRespValidationError) ErrorName() string { return "OrderCancelRespValidationError" }

// Error satisfies the builtin error interface
func (e OrderCancelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCancelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCancelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCancelRespValidationError{}

// Validate checks the field values on OrderPayReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderPayReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPayReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderPayReqMultiError, or
// nil if none found.
func (m *OrderPayReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPayReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := OrderPayReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderPayReqMultiError(errors)
	}

	return nil
}

// OrderPayReqMultiError is an error wrapping multiple validation errors
// returned by OrderPayReq.ValidateAll() if the designated constraints aren't met.
type OrderPayReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPayReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPayReqMultiError) AllErrors() []error { return m }

// OrderPayReqValidationError is the validation error returned by
// OrderPayReq.Validate if the designated constraints aren't met.
type OrderPayReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPayReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPayReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPayReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPayReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPayReqValidationError) ErrorName() string { return "OrderPayReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderPayReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPayReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPayReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPayReqValidationError{}

// Validate checks the field values on OrderPayResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderPayResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPayResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderPayRespMultiError, or
// nil if none found.
func (m *OrderPayResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPayResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderPayRespMultiError(errors)
	}

	return nil
}

// OrderPayRespMultiError is an error wrapping multiple validation errors
// returned by OrderPayResp.ValidateAll() if the designated constraints aren't met.
type OrderPayRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPayRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPayRespMultiError) AllErrors() []error { return m }

// OrderPayRespValidationError is the validation error returned by
// OrderPayResp.Validate if the designated constraints aren't met.
type OrderPayRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPayRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPayRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPayRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPayRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPayRespValidationError) ErrorName() string { return "OrderPayRespValidationError" }

// Error satisfies the builtin error interface
func (e OrderPayRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPayResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPayRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPayRespValidationError{}
