// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package service

//go:generate minimock -i route256.ozon.ru/project/cart/internal/service.ProductExternalService -o product_external_service_mock_test.go -n ProductExternalServiceMock -p service

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/cart/internal/model"
)

// ProductExternalServiceMock implements ProductExternalService
type ProductExternalServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetProduct          func(SKU uint32) (gp1 *model.Good, err error)
	inspectFuncGetProduct   func(SKU uint32)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mProductExternalServiceMockGetProduct
}

// NewProductExternalServiceMock returns a mock for ProductExternalService
func NewProductExternalServiceMock(t minimock.Tester) *ProductExternalServiceMock {
	m := &ProductExternalServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductMock = mProductExternalServiceMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*ProductExternalServiceMockGetProductParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductExternalServiceMockGetProduct struct {
	mock               *ProductExternalServiceMock
	defaultExpectation *ProductExternalServiceMockGetProductExpectation
	expectations       []*ProductExternalServiceMockGetProductExpectation

	callArgs []*ProductExternalServiceMockGetProductParams
	mutex    sync.RWMutex
}

// ProductExternalServiceMockGetProductExpectation specifies expectation struct of the ProductExternalService.GetProduct
type ProductExternalServiceMockGetProductExpectation struct {
	mock    *ProductExternalServiceMock
	params  *ProductExternalServiceMockGetProductParams
	results *ProductExternalServiceMockGetProductResults
	Counter uint64
}

// ProductExternalServiceMockGetProductParams contains parameters of the ProductExternalService.GetProduct
type ProductExternalServiceMockGetProductParams struct {
	SKU uint32
}

// ProductExternalServiceMockGetProductResults contains results of the ProductExternalService.GetProduct
type ProductExternalServiceMockGetProductResults struct {
	gp1 *model.Good
	err error
}

// Expect sets up expected params for ProductExternalService.GetProduct
func (mmGetProduct *mProductExternalServiceMockGetProduct) Expect(SKU uint32) *mProductExternalServiceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductExternalServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductExternalServiceMockGetProductExpectation{}
	}

	mmGetProduct.defaultExpectation.params = &ProductExternalServiceMockGetProductParams{SKU}
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the ProductExternalService.GetProduct
func (mmGetProduct *mProductExternalServiceMockGetProduct) Inspect(f func(SKU uint32)) *mProductExternalServiceMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for ProductExternalServiceMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by ProductExternalService.GetProduct
func (mmGetProduct *mProductExternalServiceMockGetProduct) Return(gp1 *model.Good, err error) *ProductExternalServiceMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductExternalServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductExternalServiceMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &ProductExternalServiceMockGetProductResults{gp1, err}
	return mmGetProduct.mock
}

// Set uses given function f to mock the ProductExternalService.GetProduct method
func (mmGetProduct *mProductExternalServiceMockGetProduct) Set(f func(SKU uint32) (gp1 *model.Good, err error)) *ProductExternalServiceMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the ProductExternalService.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the ProductExternalService.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	return mmGetProduct.mock
}

// When sets expectation for the ProductExternalService.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mProductExternalServiceMockGetProduct) When(SKU uint32) *ProductExternalServiceMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductExternalServiceMock.GetProduct mock is already set by Set")
	}

	expectation := &ProductExternalServiceMockGetProductExpectation{
		mock:   mmGetProduct.mock,
		params: &ProductExternalServiceMockGetProductParams{SKU},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up ProductExternalService.GetProduct return parameters for the expectation previously defined by the When method
func (e *ProductExternalServiceMockGetProductExpectation) Then(gp1 *model.Good, err error) *ProductExternalServiceMock {
	e.results = &ProductExternalServiceMockGetProductResults{gp1, err}
	return e.mock
}

// GetProduct implements ProductExternalService
func (mmGetProduct *ProductExternalServiceMock) GetProduct(SKU uint32) (gp1 *model.Good, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(SKU)
	}

	mm_params := ProductExternalServiceMockGetProductParams{SKU}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, &mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_got := ProductExternalServiceMockGetProductParams{SKU}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("ProductExternalServiceMock.GetProduct got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the ProductExternalServiceMock.GetProduct")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(SKU)
	}
	mmGetProduct.t.Fatalf("Unexpected call to ProductExternalServiceMock.GetProduct. %v", SKU)
	return
}

// GetProductAfterCounter returns a count of finished ProductExternalServiceMock.GetProduct invocations
func (mmGetProduct *ProductExternalServiceMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of ProductExternalServiceMock.GetProduct invocations
func (mmGetProduct *ProductExternalServiceMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to ProductExternalServiceMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mProductExternalServiceMockGetProduct) Calls() []*ProductExternalServiceMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*ProductExternalServiceMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *ProductExternalServiceMock) MinimockGetProductDone() bool {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductInspect logs each unmet expectation
func (m *ProductExternalServiceMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductExternalServiceMock.GetProduct with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductExternalServiceMock.GetProduct")
		} else {
			m.t.Errorf("Expected call to ProductExternalServiceMock.GetProduct with params: %#v", *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		m.t.Error("Expected call to ProductExternalServiceMock.GetProduct")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductExternalServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetProductInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductExternalServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductExternalServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductDone()
}
