version: "3.9"

services:
  cart:
    image: cart
    build: ./cart/
    ports:
      - "8082:8080"
    networks:
      - grpcNet
    depends_on:
      - loms
  loms:
    image: loms
    build: ./loms/
    ports:
      - "8084:50051"
    depends_on:
      postgresdb:
        condition: service_started
      kafka0:
        condition: service_started
      kafka-init-topics:
        condition: service_completed_successfully
    networks:
      - grpcNet
  postgresdb:
    image: postgres:15.0
    container_name: loms-postgres
    hostname: postgres
    user: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
    ports:
      - "1235:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      # test: ["CMD-SHELL", "pg_isready -U goose"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./loms/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
      - loms-pg-data:/var/lib/postgresql/data
    networks:
      - grpcNet

  kafka-ui:
    container_name: ws-6-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8090:8080
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTERS_0_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS}
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
        - grpcNet

  kafka0:
    container_name: ws-6-kafka
    image: confluentinc/cp-kafka:7.6.0.amd64
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_CONTROLLER_LISTENER_NAMES}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CONTROLLER_QUORUM_VOTERS}
      KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
      KAFKA_LOG_DIRS: ${KAFKA_LOG_DIRS}
      CLUSTER_ID: ${CLUSTER_ID}
    networks:
        - grpcNet
  
  kafka-init-topics:
    container_name: ws-6-init-topics
    image: confluentinc/cp-kafka:7.6.0.amd64
    depends_on:
      - kafka0
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:29092 1 30 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"
    networks:
      - grpcNet

  loms-consumer-1:
    build: ./notifier/
    depends_on:
      - loms
    networks:
      - grpcNet

  loms-consumer-2:
    build: ./notifier/
    depends_on:
      - loms-consumer-1
    networks:
      - grpcNet

  loms-consumer-3:
    build: ./notifier/
    depends_on:
      - loms-consumer-2
    networks:
      - grpcNet

  # goose:
  #   image: fpopic/goose:1.0
  #   build:
  #     context: .
  #   user: 1000:1000 # put your non-root user's uid:gid (run cmd `id`)
  #   container_name: migrations-goose
  #   depends_on:
  #     postgresdb:
  #       condition: service_healthy
  #   environment:
  #     - GOOSE_DRIVER=postgres
  #     # e.g. postgres://{user}:{password}@{hostname}:{port}/{database-name}
  #     - GOOSE_DBSTRING=postgres://postgres:12341234@postgresdb:1234/stocks?sslmode=disable
  #   volumes:
  #     - ./loms/migrations/orders:/app/db/migrations/orders:rw
  #     - ./loms/migrations/stocks:/app/db/migrations/stocks:rw
networks:
  grpcNet:
volumes:
  loms-pg-data: {}
